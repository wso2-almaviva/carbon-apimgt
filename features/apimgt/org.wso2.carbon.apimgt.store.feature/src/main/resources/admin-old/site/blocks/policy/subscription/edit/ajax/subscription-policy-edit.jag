<%
include("/jagg/jagg.jag");

(function () {
    response.contentType = "application/json; charset=UTF-8";
    var mod, result, obj,
    action = request.getParameter("action"),
    site = require("/site/conf/site.json"),
    msg = require("/site/conf/ui-messages.jag");

    if(jagg.getUser() == null){
        print({
            error:true,
            message:'timeout'
        });
    } else if( request.getMethod() == 'POST' && !jagg.isCSRFTokenValid()){
        print({
            error:true,
            message: msg.error.csrfError
        });        
    } else if (request.getMethod() == 'POST') {
        if (action == "add" || action == "update") {
            var policyName =  request.getParameter("policyName", "UTF-8");
            var description =  request.getParameter("description", "UTF-8");
            var defaultQuotaPolicy =  request.getParameter("defaultQuotaPolicy", "UTF-8");
            var defaultRequestCount =  request.getParameter("defaultRequestCount", "UTF-8");
            var defaultBandwidth =  request.getParameter("defaultBandwidth", "UTF-8");
            var defaultBandwidthUnit =  request.getParameter("defaultBandwidthUnit", "UTF-8");
            var defaultUnitTime =  request.getParameter("defaultUnitTime", "UTF-8");
            var defaultTimeUnit =  request.getParameter("defaultTimeUnit", "UTF-8");
            var rateLimitCount =  request.getParameter("rateLimitCount", "UTF-8");
            var rateLimitTimeUnit =  request.getParameter("rateLimitTimeUnit", "UTF-8");

            var stopOnQuotaReach =  request.getParameter("stopOnQuotaReach", "UTF-8");
            var tierPlan =  request.getParameter("tierPlan", "UTF-8");
            var attributes =  parse(request.getParameter("attributes", "UTF-8"));
            var monetizationPlan = request.getParameter("monetizationPlan", "UTF-8");
            var fixedRate = request.getParameter("fixedRate", "UTF-8");
            var billingCycle = request.getParameter("billingCycle", "UTF-8");
            var pricePerRequest = request.getParameter("pricePerRequest", "UTF-8");
            var currencyType = request.getParameter("currencyType", "UTF-8");
            mod = jagg.module("policy");

            result = mod.addSubscriptionPolicy(action, policyName, description, defaultQuotaPolicy,
                                                defaultRequestCount, defaultBandwidth, defaultBandwidthUnit,
                                                defaultUnitTime, defaultTimeUnit, rateLimitCount, rateLimitTimeUnit,
                                                stopOnQuotaReach, tierPlan, attributes, monetizationPlan, fixedRate,
                                                billingCycle, pricePerRequest, currencyType);
            //add permissions
            var tierPermission = {};
            tierPermission.policyName = policyName;
            tierPermission.permissiontype = request.getParameter("permissionType", "UTF-8");
            tierPermission.roles = request.getParameter("roles", "UTF-8");
            permissionResult = mod.updateThrottleTierPermissions(tierPermission);
            session.remove("throttleTierPermissions");

            if (result.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action) + " : " + result.message
                };
            } else if (permissionResult.error) {
                obj = {
                    error:true,
                    message:msg.error.backendError(action)
                   };
            } else {
                obj = {
                    error:false,
                    response:result.valid
                }
            }
            print(obj);

        } else if (action === "validateRoles") {
              mod = jagg.module("policy");
              var user=jagg.getUser().username;
              var roles = request.getParameter("roles");
              result = mod.validateRoles(roles,user);
              if (result.error) {
                  obj = {
                      error:true,
                      message:msg.error.backendError(action)
                  };
              } else {
                  obj = {
                      error:false,
                      response:result.valid
                  }
              }
              print(obj);
        }
    }
 }());
%>